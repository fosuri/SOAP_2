package com.soap.nk;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ws.server.endpoint.annotation.Endpoint;
import org.springframework.ws.server.endpoint.annotation.PayloadRoot;
import org.springframework.ws.server.endpoint.annotation.RequestPayload;
import org.springframework.ws.server.endpoint.annotation.ResponsePayload;

import io.spring.guides.gs_producing_web_service.GetCountryRequest;
import io.spring.guides.gs_producing_web_service.GetCountryResponse;

@Endpoint
public class CountryEndpoint {
  private static final String NAMESPACE_URI = "http://spring.io/guides/gs-producing-web-service";

  private CountryRepository countryRepository;

  @Autowired
  public CountryEndpoint(CountryRepository countryRepository) {
    this.countryRepository = countryRepository;
  }

  @PayloadRoot(namespace = NAMESPACE_URI, localPart = "getCountryRequest")
  @ResponsePayload
  public GetCountryResponse getCountry(@RequestPayload GetCountryRequest request) {
    GetCountryResponse response = new GetCountryResponse();
    response.setCountry(countryRepository.findCountry(request.getName()));

    return response;
  }
}
package com.soap.nk;

import jakarta.annotation.PostConstruct;
import java.util.ArrayList;
import java.util.List;

import io.spring.guides.gs_producing_web_service.Country;
import io.spring.guides.gs_producing_web_service.Currency;
import org.springframework.stereotype.Component;
import org.springframework.util.Assert;

@Component
public class CountryRepository {
  private List<Country> countries = new ArrayList<>();

  @PostConstruct
  public void initData() {
    Country russia = new Country();
    russia.setName("Russia");
    russia.setCapital("Moscow");
    russia.setCurrency(Currency.EUR);
    russia.setPopulation(46704314);

    countries.add(russia);

    Country poland = new Country();
    poland.setName("Poland");
    poland.setCapital("Warsaw");
    poland.setCurrency(Currency.PLN);
    poland.setPopulation(38186860);

    countries.add(poland);

    Country uk = new Country();
    uk.setName("United Kingdom");
    uk.setCapital("London");
    uk.setCurrency(Currency.GBP);
    uk.setPopulation(63705000);

    countries.add(uk);
  }

  public Country findCountry(String name) {
    Assert.notNull(name, "The country's name must not be null");
    for (Country country : countries) {
      if (country.getName().equalsIgnoreCase(name)) {
        return country;
      }
    }
    return null;
  }
}

package com.soap.nk;

import org.springframework.boot.web.servlet.ServletRegistrationBean;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.ws.config.annotation.EnableWs;
import org.springframework.ws.config.annotation.WsConfigurerAdapter;
import org.springframework.ws.transport.http.MessageDispatcherServlet;
import org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition;
import org.springframework.xml.xsd.SimpleXsdSchema;
import org.springframework.xml.xsd.XsdSchema;

@EnableWs
@Configuration
public class WebServiceConfig extends WsConfigurerAdapter {
  @Bean
  public ServletRegistrationBean<MessageDispatcherServlet> messageDispatcherServlet(
      ApplicationContext applicationContext) {
    MessageDispatcherServlet servlet = new MessageDispatcherServlet();
    servlet.setApplicationContext(applicationContext);
    servlet.setTransformWsdlLocations(true);
    return new ServletRegistrationBean<>(servlet, "/ws/*");
  }

  @Bean(name = "countries")
  public DefaultWsdl11Definition defaultWsdl11Definition(XsdSchema countriesSchema) {
    DefaultWsdl11Definition wsdl11Definition = new DefaultWsdl11Definition();
    wsdl11Definition.setPortTypeName("CountriesPort");
    wsdl11Definition.setLocationUri("/ws");
    wsdl11Definition.setTargetNamespace("http://spring.io/guides/gs-producing-web-service");
    wsdl11Definition.setSchema(countriesSchema);
    return wsdl11Definition;
  }

  @Bean
  public XsdSchema countriesSchema() {
    return new SimpleXsdSchema(new ClassPathResource("countries.xsd"));
  }
}

package com.soap.nk;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class NkApplication {

	public static void main(String[] args) {
		SpringApplication.run(NkApplication.class, args);
	}

}

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:tns="http://spring.io/guides/gs-producing-web-service"
  targetNamespace="http://spring.io/guides/gs-producing-web-service" elementFormDefault="qualified">

  <xs:element name="getCountryRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="name" type="xs:string" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="getCountryResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="country" type="tns:country" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="country">
    <xs:sequence>
      <xs:element name="name" type="xs:string" />
      <xs:element name="population" type="xs:int" />
      <xs:element name="capital" type="xs:string" />
      <xs:element name="currency" type="tns:currency" />
    </xs:sequence>
  </xs:complexType>

  <xs:simpleType name="currency">
    <xs:restriction base="xs:string">
      <xs:enumeration value="GBP" />
      <xs:enumeration value="EUR" />
      <xs:enumeration value="PLN" />
    </xs:restriction>
  </xs:simpleType>
</xs:schema>


Можешь сделать так, чтобы данные в CountryRepository записывались из базы данных mariaDB(Mysql). В самой базе данных у меня таблица countries с таблицами id, iso_code(varchar(2)), name(varchar(255)), capital_city(varchar(255)), phone_code(varchar(10)), continent_code(varchar(2)), currency_iso_code(varchar(3)),  country_flag(varchar(255)).
Следовательно и xsd надо заменить для этих данных.